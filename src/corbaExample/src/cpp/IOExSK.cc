// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "IOEx.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



CORBA::Exception::insertExceptionToAny java::io::IOEx::insertToAnyFn = 0;
CORBA::Exception::insertExceptionToAnyNCP java::io::IOEx::insertToAnyFnNCP = 0;

java::io::IOEx::IOEx(const java::io::IOEx& _s) : CORBA::UserException(_s)
{
  value = _s.value;

}

java::io::IOEx::IOEx(IOException* _value)
{
  pd_insertToAnyFn    = java::io::IOEx::insertToAnyFn;
  pd_insertToAnyFnNCP = java::io::IOEx::insertToAnyFnNCP;
  value = _value;

}



java::io::IOEx& java::io::IOEx::operator=(const java::io::IOEx& _s)
{
  ((CORBA::UserException*) this)->operator=(_s);
  value = _s.value;

  return *this;
}

java::io::IOEx::~IOEx() {}

void java::io::IOEx::_raise() const { throw *this; }

const char* java::io::IOEx::_PD_repoId = "IDL:java/io/IOEx:1.0";
const char* java::io::IOEx::_PD_typeId = "Exception/UserException/java::io::IOEx";

java::io::IOEx* java::io::IOEx::_downcast(CORBA::Exception* _e) {
  return (IOEx*) _NP_is_a(_e, _PD_typeId);
}

const java::io::IOEx* java::io::IOEx::_downcast(const CORBA::Exception* _e) {
  return (const IOEx*) _NP_is_a(_e, _PD_typeId);
}

CORBA::Exception* java::io::IOEx::_NP_duplicate() const {
  return new IOEx(*this);
}

const char* java::io::IOEx::_NP_typeId() const {
  return _PD_typeId;
}

const char* java::io::IOEx::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:java/io/IOEx:1.0");
  return _PD_repoId;
}
 
void java::io::IOEx::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
java::io::IOEx::operator>>= (cdrStream& _n) const
{
  IOException_Helper::marshal(value,_n);

}

void
java::io::IOEx::operator<<= (cdrStream& _n)
{
  value = IOException_Helper::unmarshal(_n);

}

