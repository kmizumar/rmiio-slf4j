// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "Throwable.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



// valuetype Throwable

void
java::lang::Throwable_Helper::add_ref(::java::lang::Throwable* _v)
{
  if (_v) _v->_add_ref();
}

void
java::lang::Throwable_Helper::remove_ref(::java::lang::Throwable* _v)
{
  if (_v) _v->_remove_ref();
}

java::lang::Throwable*
java::lang::Throwable::_downcast(CORBA::ValueBase* _b)
{
  return _b ? (java::lang::Throwable*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* java::lang::Throwable::_PD_repoId = "RMI:java.lang.Throwable:F8678B4F4D2EB705:D5C635273977B8CB";

const char*
java::lang::Throwable::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
java::lang::Throwable::_NP_repositoryId(CORBA::ULong& hash) const
{
  hash = 1332196603U;
  return _PD_repoId;
}

CORBA::Boolean
java::lang::Throwable::_NP_custom() const
{
  return 0;
}

void*
java::lang::Throwable::_ptrToValue(const char* _id)
{
  if (_id == ::java::lang::Throwable::_PD_repoId)
    return (::java::lang::Throwable*) this;
  
  

  if (_id == CORBA::ValueBase::_PD_repoId)
    return (CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::java::lang::Throwable::_PD_repoId))
    return (::java::lang::Throwable*) this;
  
  

  if (omni::strMatch(_id, CORBA::ValueBase::_PD_repoId))
    return (CORBA::ValueBase*) this;

  return 0;
}

void
java::lang::Throwable::_NP_marshal(java::lang::Throwable* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, java::lang::Throwable::_PD_repoId, _0s);
}

void
java::lang::Throwable_Helper::marshal(::java::lang::Throwable* _v, cdrStream& _0s)
{
  java::lang::Throwable::_NP_marshal(_v,_0s);
}

java::lang::Throwable*
java::lang::Throwable::_NP_unmarshal(cdrStream& _0s)
{
  CORBA::ValueBase* _b = omniValueType::unmarshal(java::lang::Throwable::_PD_repoId,
						  1332196603U, 0, _0s);
  java::lang::Throwable* _d = java::lang::Throwable::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           java::lang::Throwable::_PD_repoId,
           1332196603U, _b, (CORBA::CompletionStatus)_0s.completion());
    _d = java::lang::Throwable::_downcast(_b);
  }
  return _d;
}

java::lang::Throwable*
java::lang::Throwable_Helper::unmarshal(cdrStream& _0s)
{
  return java::lang::Throwable::_NP_unmarshal(_0s);
}

void
java::lang::Throwable::_PR_marshal_state(cdrStream& _0s) const
{
  
}

void
java::lang::Throwable::_PR_unmarshal_state(cdrStream& _0s)
{
  
}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
java::lang::Throwable*
#else
CORBA::ValueBase*
#endif
java::lang::Throwable::_copy_value()
{
  CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 1332196603U);
  java::lang::Throwable* _v = java::lang::Throwable::_downcast(_b);
  if (!_v) {
    CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
java::lang::Throwable::_PR_copy_state(java::lang::Throwable* _v)
{
  
}


java::lang::Throwable::Throwable()  {}
java::lang::Throwable::~Throwable() {}

OBV_java::lang::Throwable::Throwable() {}
OBV_java::lang::Throwable::~Throwable() {}

const _omni_ValueIds*
java::lang::Throwable::_NP_truncatableIds() const
{
  return 0;
}

java::lang::Throwable_init::Throwable_init()  {}
java::lang::Throwable_init::~Throwable_init() {}

java::lang::Throwable_init*
java::lang::Throwable_init::_downcast(CORBA::ValueFactory _v)
{
  return _v ? (::java::lang::Throwable_init*)_v->_ptrToFactory(::java::lang::Throwable::_PD_repoId) : 0;
}

void*
java::lang::Throwable_init::_ptrToFactory(const char* _id)
{
  if (_id == ::java::lang::Throwable::_PD_repoId)
    return (::java::lang::Throwable_init*) this;
  
  if (_id == CORBA::ValueBase::_PD_repoId)
    return (CORBA::ValueFactoryBase*) this;
  
  if (omni::strMatch(_id, ::java::lang::Throwable::_PD_repoId))
    return (::java::lang::Throwable_init*) this;
  
  if (omni::strMatch(_id, CORBA::ValueBase::_PD_repoId))
    return (CORBA::ValueFactoryBase*) this;

  return 0;
}

